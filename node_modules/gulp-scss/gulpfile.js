(function() {
  var coffee, g, lint, mocha, notify, plumber;

  g = require("gulp");

  lint = require("gulp-coffeelint");

  plumber = require("gulp-plumber");

  notify = require("gulp-notify");

  mocha = require("gulp-mocha");

  coffee = require("gulp-coffee");

  g.task("gulpfile-check", function() {
    return g.src("gulpfile.coffee").pipe(plumber({
      "errorHandler": notify.onError("<%= error.message %>")
    })).pipe(lint("coffeelint.json")).pipe(lint.reporter()).pipe(lint.reporter("failOnWarning"));
  });

  g.task("syntax-check", function() {
    return g.src("src/**/*.coffee").pipe(plumber({
      "errorHandler": notify.onError("<%= error.message %>")
    })).pipe(lint()).pipe(lint.reporter()).pipe(lint.reporter("failOnWarning"));
  });

  g.task("unit-test", ["syntax-check"], function() {
    return g.src("tests/unit.coffee").pipe(plumber({
      "errorHandler": notify.onError("<%= error.message %>")
    })).pipe(lint()).pipe(lint.reporter()).pipe(lint.reporter("failOnWarning")).pipe(mocha({
      "reporter": "dot",
      "timeout": 2000
    }));
  });

  g.task("integration-test", ["syntax-check"], function() {
    return g.src("tests/integrated.coffee").pipe(plumber({
      "errorHandler": notify.onError("<%= error.message %>")
    })).pipe(lint()).pipe(lint.reporter()).pipe(lint.reporter("failOnWarning")).pipe(mocha({
      "reporter": "dot",
      "timeout": 2000
    }));
  });

  g.task("compile", ["unit-test", "integration-test"], function() {
    return g.src("src/**/*.coffee").pipe(coffee()).pipe(g.dest("./lib"));
  });

  g.task("default", function() {
    g.watch("gulpfile.coffee", ["gulpfile-check"]);
    return g.watch(["tests/**/*.coffee", "src/**/*.coffee"], ["compile"]);
  });

}).call(this);
