(function() {
  var expect, mkfunc;

  expect = require("chai").expect;

  mkfunc = require("../../src/inject.coffee");

  describe("mkfunc tests", function() {
    describe("Invalid argument", function() {
      describe("For target", function() {
        var errMsg, secArg;
        errMsg = "1st argument must be a list having a function as last element";
        secArg = {
          "test": "test"
        };
        describe("String case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc("test", secArg);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("Number case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(12345.01, secArg);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("Object case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc({
                "test": "test"
              }, secArg);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("Undefined case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(void 0, secArg);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("Null case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(null, secArg);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("true case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(true, secArg);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("false case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(false, secArg);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("Array case, but not function at last", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(["test", "test"], secArg);
            })["throw"](TypeError, errMsg);
          });
        });
        return describe("Array, case, but it has non-string values", function() {
          var errMsg2;
          errMsg2 = "Target contains non-string param(s)";
          describe("Undefined case", function() {
            return expect(function() {
              return mkfunc([
                void 0, "test2", function(t, t2) {
                  return [t, t2];
                }
              ], secArg);
            })["throw"](TypeError, errMsg2);
          });
          describe("null case", function() {
            return expect(function() {
              return mkfunc([
                "test", null, function(t, t2) {
                  return [t, t2];
                }
              ], secArg);
            })["throw"](TypeError, errMsg2);
          });
          describe("true case", function() {
            return expect(function() {
              return mkfunc([
                "test", true, function(t, t2) {
                  return [t, t2];
                }
              ], secArg);
            })["throw"](TypeError, errMsg2);
          });
          describe("false case", function() {
            return expect(function() {
              return mkfunc([
                false, "test2", function(t, t2) {
                  return [t, t2];
                }
              ], secArg);
            })["throw"](TypeError, errMsg2);
          });
          describe("Number case", function() {
            return it("Should throw TypeError", function() {
              return expect(function() {
                return mkfunc([
                  "test", 2, function(t, t2) {
                    return [t, t2];
                  }
                ], secArg);
              })["throw"](TypeError, errMsg2);
            });
          });
          describe("List case", function() {
            return it("Should throw TypeError", function() {
              return expect(function() {
                return mkfunc([
                  "test", ["test", "test"], function(t, t2) {
                    return [t, t2];
                  }
                ], secArg);
              })["throw"](TypeError, errMsg2);
            });
          });
          describe("Object case", function() {
            return it("Should throw TypeError", function() {
              return expect(function() {
                return mkfunc([
                  "test", {
                    "test": "test"
                  }, function(t, t2) {
                    return [t, t2];
                  }
                ], secArg);
              })["throw"](TypeError, errMsg2);
            });
          });
          return describe("Function case", function() {
            return it("Should throw TypeError", function() {
              return expect(function() {
                return mkfunc([
                  "test", function(t, t2) {
                    return [t, t2];
                  }, function(t, t2) {
                    return [t, t2];
                  }
                ], secArg);
              })["throw"](TypeError, errMsg2);
            });
          });
        });
      });
      return describe("For default values", function() {
        var errMsg, firstArg;
        firstArg = [
          "test", "test2", function(t, t2) {
            return [t, t2];
          }
        ];
        errMsg = ["2nd argument must be an object having", "corresponding key and value"].join(" ");
        describe("String case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(firstArg, "test");
            })["throw"](TypeError, errMsg);
          });
        });
        describe("Number case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(firstArg, 12345.01);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("List case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(firstArg, ["This", "is", "a", "test"]);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("Function case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(firstArg, function(t) {
                return t;
              });
            })["throw"](TypeError, errMsg);
          });
        });
        describe("Undefined case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(firstArg, void 0);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("Null case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(firstArg, null);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("false case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(firstArg, false);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("true case", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(firstArg, true);
            })["throw"](TypeError, errMsg);
          });
        });
        describe("Object case, unsatisfied field", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(firstArg, {
                "test": "test"
              });
            })["throw"](TypeError, "Unsatisfied Field: test2");
          });
        });
        return describe("Object case, unexpected field", function() {
          return it("Should throw TypeError", function() {
            return expect(function() {
              return mkfunc(firstArg, {
                "test": "test",
                "test2": "test2",
                "test3": "test3"
              });
            })["throw"](TypeError, "Unexpected Field: test3");
          });
        });
      });
    });
    return describe("Valid Argument", function() {
      var InjectCall;
      InjectCall = require("../../src/call");
      return it("Returns InjectCall Object", function() {
        var result;
        result = mkfunc([
          "test", "test2", function(t1, t2) {
            return [t1, t2];
          }
        ], {
          "test": "hello",
          "test2": "world"
        });
        return expect(result).instanceOf(InjectCall);
      });
    });
  });

}).call(this);
